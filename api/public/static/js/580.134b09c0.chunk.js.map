{"version":3,"file":"static/js/580.134b09c0.chunk.js","mappings":"qRA+FMA,EAAYC,EAAAA,GAAAA,IAAH,0GAOTC,EAAuBD,EAAAA,GAAAA,IAAH,yDAKpBE,EAA4BF,EAAAA,GAAAA,IAAH,oLASzBG,EAAmBH,EAAAA,GAAAA,GAAH,iEAKhBI,EAAeJ,EAAAA,GAAAA,EAAH,yIAQZK,EAAeL,EAAAA,GAAAA,IAAH,iQAKF,SAACM,GAAD,OACZA,EAAMC,SAAW,8BAAgC,MAQ/CC,EAAeR,EAAAA,GAAAA,IAAH,2CAIZS,EAAmBT,EAAAA,GAAAA,IAAH,yFAMhBU,EAAqBV,EAAAA,GAAAA,IAAH,wGAQlBW,EAAsBX,EAAAA,GAAAA,OAAH,seAWrBK,GAiBJ,UA/KgB,YACdO,EAAAA,EAAAA,GAAa,yBACb,OAAgDC,EAAAA,EAAAA,WAAS,GAAzD,eAAOC,EAAP,KAAyBC,EAAzB,KACA,GAA8DC,EAAAA,EAAAA,KAC5D,SAACC,GAAD,OAAWA,EAAMC,WADXC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,OAAQC,EAA3B,EAA2BA,eAAgBC,EAA3C,EAA2CA,eAGrCC,GAAWC,EAAAA,EAAAA,MAYjB,OAVAC,EAAAA,EAAAA,YAAU,WACRF,GAASG,EAAAA,EAAAA,SACR,CAACH,KAEJE,EAAAA,EAAAA,YAAU,WACJN,EAAUQ,OAAS,GACrBJ,GAASK,EAAAA,EAAAA,IAAmB,CAAEV,QAASG,OAExC,CAACF,EAAWE,EAAgBE,IAE3BH,IAAWS,EAAAA,GAAAA,SAAuB,SAAC,IAAD,KAGpC,UAAC9B,EAAD,YACE,SAAC,IAAD,CACE+B,aAAc,kBAAMf,GAAoB,IACxCgB,UAAWjB,EAFb,SAIGA,IACC,SAAC,IAAD,CAAakB,mBAAoB,kBAAMjB,GAAoB,SAG/D,UAACd,EAAD,YACE,UAACC,EAAD,YACE,SAACC,EAAD,8BACA,SAACQ,EAAD,CAAqBsB,QAAS,kBAAMlB,GAAoB,IAAxD,gCAIDI,EAAUQ,OAAS,IAClB,iCACE,SAACvB,EAAD,+BACA,UAACC,EAAD,YACE,SAACI,EAAD,UAAmBY,EAAea,QAClC,UAAC1B,EAAD,WACGa,EAAeH,QADlB,KAC6BG,EAAec,aAE5C,UAAC3B,EAAD,WACGa,EAAee,KADlB,KAC0Bf,EAAeJ,MADzC,KACkD,IAC/CI,EAAegB,YAElB,UAAC3B,EAAD,uBACU,0BAAOW,EAAeiB,qBAGlC,SAAClC,EAAD,8BACCkB,EAAeiB,KAAI,SAACrB,GAAD,OAClB,UAACb,EAAD,YACE,SAACI,EAAD,UAAmBS,EAAQgB,QAC3B,UAAC1B,EAAD,WACGU,EAAQA,QADX,KACsBA,EAAQiB,aAE9B,UAAC3B,EAAD,WACGU,EAAQkB,KADX,KACmBlB,EAAQD,MAD3B,MACqCC,EAAQmB,YAE7C,UAAC3B,EAAD,uBACU,0BAAOQ,EAAQoB,mBATRpB,EAAQsB,WAejC,SAACnC,EAAD,CAAc4B,QAAS,kBAAMlB,GAAoB,IAAjD,UACE,UAACJ,EAAD,CAAqBsB,QAAS,kBAAMlB,GAAoB,IAAxD,WACE,SAAC,IAAD,KACA","sources":["components/Address.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Plus } from 'react-feather';\n\nimport Spinner from './shared/SpinnerRect';\nimport Modal from './Modal';\nimport AddressForm from './AddressForm';\n\nimport usePageTitle from '../hooks/usePageTitle';\n\nimport { getUserAddresses, setSelectedAddress } from '../store/addressSlice';\nimport { STATUS } from '../utils';\n\nconst Address = () => {\n  usePageTitle('Address | Fashionista');\n  const [showAddressModal, setShowAddressModal] = useState(false);\n  const { addresses, status, defaultAddress, otherAddresses } = useSelector(\n    (state) => state.address\n  );\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getUserAddresses());\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (addresses.length > 0) {\n      dispatch(setSelectedAddress({ address: defaultAddress }));\n    }\n  }, [addresses, defaultAddress, dispatch]);\n\n  if (status === STATUS.LOADING) return <Spinner />;\n\n  return (\n    <Container>\n      <Modal\n        onModalClose={() => setShowAddressModal(false)}\n        showModal={showAddressModal}\n      >\n        {showAddressModal && (\n          <AddressForm afterSubmitHandler={() => setShowAddressModal(false)} />\n        )}\n      </Modal>\n      <AddressListContainer>\n        <AddressListTitleContainer>\n          <AddressListTitle>Your Addresses</AddressListTitle>\n          <AddNewAddressButton onClick={() => setShowAddressModal(true)}>\n            Add New Address\n          </AddNewAddressButton>\n        </AddressListTitleContainer>\n        {addresses.length > 0 && (\n          <>\n            <AddressTitle>Default Address</AddressTitle>\n            <AddressBlock>\n              <AddressFieldName>{defaultAddress.name}</AddressFieldName>\n              <AddressField>\n                {defaultAddress.address}, {defaultAddress.locality}\n              </AddressField>\n              <AddressField>\n                {defaultAddress.city}, {defaultAddress.state} -{' '}\n                {defaultAddress.pincode}\n              </AddressField>\n              <AddressFieldNumber>\n                Mobile: <span>{defaultAddress.phoneNumber}</span>\n              </AddressFieldNumber>\n            </AddressBlock>\n            <AddressTitle>Other Addresses</AddressTitle>\n            {otherAddresses.map((address) => (\n              <AddressBlock key={address.id}>\n                <AddressFieldName>{address.name}</AddressFieldName>\n                <AddressField>\n                  {address.address}, {address.locality}\n                </AddressField>\n                <AddressField>\n                  {address.city}, {address.state} - {address.pincode}\n                </AddressField>\n                <AddressFieldNumber>\n                  Mobile: <span>{address.phoneNumber}</span>\n                </AddressFieldNumber>\n              </AddressBlock>\n            ))}\n          </>\n        )}\n        <AddressBlock onClick={() => setShowAddressModal(true)}>\n          <AddNewAddressButton onClick={() => setShowAddressModal(true)}>\n            <Plus />\n            <span>Add New Address</span>\n          </AddNewAddressButton>\n        </AddressBlock>\n      </AddressListContainer>\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  display: flex;\n  gap: 20px;\n  align-items: flex-start;\n  min-height: 100vh;\n`;\n\nconst AddressListContainer = styled.div`\n  flex: 3;\n  background: #fff;\n`;\n\nconst AddressListTitleContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 15px 24px;\n  padding-top: 0;\n  border-bottom: 1px solid #efefef;\n`;\n\nconst AddressListTitle = styled.h1`\n  font-size: 20px;\n  font-weight: 500;\n`;\n\nconst AddressTitle = styled.p`\n  padding: 13px 24px;\n  font-size: 13px;\n  font-weight: 600;\n  text-transform: uppercase;\n  color: #535766;\n`;\n\nconst AddressBlock = styled.div`\n  padding: 13px 24px;\n  margin: 13px 24px;\n  border: 1px solid #eaeaec;\n  border-radius: 4px;\n  box-shadow: ${(props) =>\n    props.selected ? '0 0 4px rgb(40 44 63 / 20%)' : ''};\n  cursor: pointer;\n  &:hover {\n    border: 1px solid #d4d5d9;\n    box-shadow: 0 0 4px rgb(40 44 63 / 8%);\n  }\n`;\n\nconst AddressField = styled.div`\n  color: #2e2e2e;\n`;\n\nconst AddressFieldName = styled.div`\n  margin-bottom: 10px;\n  font-size: 16px;\n  font-weight: 500;\n`;\n\nconst AddressFieldNumber = styled.div`\n  margin-top: 20px;\n  color: #2e2e2e;\n  & span {\n    font-weight: 500;\n  }\n`;\n\nconst AddNewAddressButton = styled.button`\n  background: white;\n  border: 1px solid teal;\n  padding: 10px 15px;\n  font-size: 14px;\n  color: teal;\n  font-weight: 500;\n  text-transform: uppercase;\n  border-radius: 5px;\n  cursor: pointer;\n\n  ${AddressBlock} & {\n    border: none;\n    padding: 0;\n    border-radius: 0;\n    text-transform: capitalize;\n    display: flex;\n    align-items: flex-start;\n    padding: 10px 0;\n  }\n\n  & svg {\n    width: 16px;\n    height: 16px;\n    margin-right: 5px;\n  }\n`;\n\nexport default Address;\n"],"names":["Container","styled","AddressListContainer","AddressListTitleContainer","AddressListTitle","AddressTitle","AddressBlock","props","selected","AddressField","AddressFieldName","AddressFieldNumber","AddNewAddressButton","usePageTitle","useState","showAddressModal","setShowAddressModal","useSelector","state","address","addresses","status","defaultAddress","otherAddresses","dispatch","useDispatch","useEffect","getUserAddresses","length","setSelectedAddress","STATUS","onModalClose","showModal","afterSubmitHandler","onClick","name","locality","city","pincode","phoneNumber","map","id"],"sourceRoot":""}